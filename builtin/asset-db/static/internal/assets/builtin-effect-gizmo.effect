%{
  "techniques": [
    {
      "queue": "transparent",
      "priority": 1000,
      "lod": 0,
      "passes": [
        {
          "vert": "gizmo-vs",
          "frag": "gizmo-fs",
          "stage": "default",
          "cullMode": "none",
          "depthTest": false,
          "depthWrite": false,
          "blend": true,
          "blendEq": "add",
          "blendSrc": "srcAlpha",
          "blendDst": "oneMinusSrcAlpha",
          "blendAlphaEq": "add",
          "blendSrcAlpha": "one",
          "blendDstAlpha": "oneMinusSrcAlpha"
        }
      ]
    }
  ],

  "properties": {
    "color": {
      "type": "color4",
      "value": [1, 1, 1, 1]
    }
  }
%}

%% gizmo-vs {
  attribute vec3 a_position;
  attribute vec3 a_normal;

  uniform mat4 model;
  uniform mat4 view;
  uniform mat4 viewProj;
  uniform mat3 normalMatrix;

  varying vec3 normal_w;
  varying vec3 pos_w;
  varying vec3 pos_l;
  varying vec3 right;
  varying vec3 up;
  varying vec3 forward;

  void main () {
    vec4 pos = vec4(a_position, 1);

    pos_l = a_position;
    pos_w = (model * pos).xyz;
    normal_w = normalMatrix * a_normal;
    right = vec3(view[0][0], view[1][0], view[2][0]);
    up = vec3(view[0][1], view[1][1], view[2][1]);
    forward = vec3(view[0][2], view[1][2], view[2][2]);

    gl_Position = viewProj * model * pos;
  }
}

%% gizmo-fs {
  #include <gamma-correction>
  #include <rect-area-light>

  uniform vec3 eye;
  uniform vec4 color;

  varying vec3 normal_w;
  varying vec3 pos_w;
  varying vec3 pos_l;
  varying vec3 right;
  varying vec3 up;
  varying vec3 forward;

  void main () {
    vec3 N = normalize(normal_w);
    vec3 V = normalize(eye - pos_w);

    // vec3 L = normalize(cross(forward, vec3(0, 1, 0)));
    // vec3 diffuse = color.rgb * (0.2 + max(0.0, dot(N, L)) * 0.8);

    vec3 points[4];
    vec3 up = vec3(0, 1, 0);
    points[0] = (forward * 3.0 + right + up) * 40.0;
    points[1] = (forward * 3.0 - right + up) * 40.0;
    points[2] = (forward * 3.0 - right - up) * 40.0;
    points[3] = (forward * 3.0 + right - up) * 40.0;
    vec3 diffuse = color.rgb * (0.2 + LTC_Evaluate(N, V, pos_l, mat3(1), points) * 0.8);

    gl_FragColor = linearToGammaSpaceRGBA(vec4(diffuse, color.a));
  }
}
