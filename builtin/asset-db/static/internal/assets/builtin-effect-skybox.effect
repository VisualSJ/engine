%{
  techniques: [
    {
      passes: [
        {
          vert: sky-vs
          frag: sky-fs
          priority: max - 10
          rasterizerState: {
            cullMode: none
          }
          depthStencilState: {
            depthTest: false
            depthWrite: false
          }
          properties: {
            cubeMap: { type: 'samplerCube', value: 'white-cube' }
          }
        }
      ]
    }
  ]
%}

%% sky-vs {
  attribute vec3 a_position;

  #include <cc-global>

  varying vec3 viewDir;

  void main() {
    mat4 matViewRotOnly = mat4(mat3(cc_matView));
    vec4 clipPos = cc_matProj * matViewRotOnly * vec4(a_position, 1.0);

    gl_Position = clipPos.xyww;
    viewDir = a_position;
  }
}

%% sky-fs {
  varying vec3 viewDir;

  uniform samplerCube cubeMap;
  #include <gamma-correction>
  #include <unpack>

  void main() {
  #if USE_RGBE_CUBEMAP
      vec3 c = unpackRGBE(textureCube(cubeMap, viewDir));
      c = linearToGammaSpaceRGB(c / (1.0 + c));
      gl_FragColor = vec4(c, 1.0);
  #else
      gl_FragColor = textureCube(cubeMap, viewDir);
  #endif
  }
}
