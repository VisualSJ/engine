CCEFFECT {
  techniques: [
    {
      passes: [
        {
          vert: gizmo-vs
          frag: gizmo-fs
          priority: max - 10
          rasterizerState: {
            cullMode: none
          }
          depthStencilState: {
            depthTest: false
            depthWrite: false
          }
          blendState: {
            targets: [
              {
                blend: true
                blendSrc: src_alpha
                blendDst: one_minus_src_alpha
                blendDstAlpha: one_minus_src_alpha
              }
            ]
          }
          properties: {
            color: { type: 'color4', value: [1, 1, 1, 1] }
          }
        }
      ]
    }
    {
      passes: [
        {
          vert: line-vs
          frag: line-fs:front
          priority: max - 10
          rasterizerState: {
            cullMode: none
          }
          depthStencilState: {
            depthTest: false
            depthWrite: false
          }
          blendState: {
            targets: [
              {
                blend: true
                blendSrc: src_alpha
                blendDst: one_minus_src_alpha
                blendDstAlpha: one_minus_src_alpha
              }
            ]
          }
          properties: {
            color: { type: 'color4', value: [1, 1, 1, 1] }
          }
        }
      ]
    }
    {
      passes: [
        {
          vert: line-vs
          frag: line-fs:front
          priority: max - 10
          rasterizerState: {
            cullMode: none
          }
          depthStencilState: {
            depthTest: true
            depthWrite: false
          }
          blendState: {
            targets: [
              {
                blend: true
                blendSrc: src_alpha
                blendDst: one_minus_src_alpha
                blendDstAlpha: one_minus_src_alpha
              }
            ]
          }
          properties: {
            color: { type: 'color4', value: [1, 1, 1, 1] }
          }
        }
        {
          vert: line-vs
          frag: line-fs:back
          priority: max - 10
          rasterizerState: {
            cullMode: none
          }
          depthStencilState: {
            depthTest: true
            depthWrite: false
            depthFunc: greater
          }
          blendState: {
            targets: [
              {
                blend: true
                blendSrc: src_alpha
                blendDst: one
                blendDstAlpha: one_minus_src_alpha
              }
            ]
          }
          properties: {
            color: { type: 'color4', value: [1, 1, 1, 1] }
          }
        }
      ]
    }
  ]
}

CCPROGRAM gizmo-vs {
  attribute vec3 a_position;
  attribute vec3 a_normal;

  #include <cc-local>
  #include <cc-global>

  varying vec3 normal_w;
  varying vec3 pos_w;
  varying vec3 pos_l;
  varying vec3 right;
  varying vec3 up;
  varying vec3 forward;

  void main () {
    vec4 pos = vec4(a_position, 1);
    vec4 normal = vec4(a_normal, 0);

    pos_l = a_position;
    pos_w = (cc_matWorld * pos).xyz;
    normal_w = (cc_matWorldIT * normal).xyz;
    right = vec3(cc_matView[0][0], cc_matView[1][0], cc_matView[2][0]);
    up = vec3(cc_matView[0][1], cc_matView[1][1], cc_matView[2][1]);
    forward = vec3(cc_matView[0][2], cc_matView[1][2], cc_matView[2][2]);

    gl_Position = cc_matViewProj * cc_matWorld * pos;
  }
}

CCPROGRAM gizmo-fs {
  #include <gamma-correction>
  #include <rect-area-light>

  #include <cc-global>

  uniform Constant {
    vec4 color;
  };

  varying vec3 normal_w;
  varying vec3 pos_w;
  varying vec3 pos_l;
  varying vec3 right;
  varying vec3 up;
  varying vec3 forward;

  void main () {
    vec3 N = normalize(normal_w);
    vec3 V = normalize(cc_cameraPos.xyz - pos_w);

    // vec3 L = normalize(cross(forward, vec3(0, 1, 0)));
    // vec3 diffuse = color.rgb * (0.2 + max(0.0, dot(N, L)) * 0.8);

    vec3 points [4];
    vec3 up = vec3(0, 1, 0);
    points[0] = (forward * 3.0 + right + up) * 40.0;
    points[1] = (forward * 3.0 - right + up) * 40.0;
    points[2] = (forward * 3.0 - right - up) * 40.0;
    points[3] = (forward * 3.0 + right - up) * 40.0;
    vec3 diffuse = color.rgb * (0.2 + LTC_Evaluate(N, V, pos_l, mat3(1), points) * 0.8);

    gl_FragColor = linearToGammaSpaceRGBA(vec4(diffuse, color.a));
  }
}

CCPROGRAM line-vs {
  attribute highp vec3 a_position;

  #include <cc-local>
  #include <cc-global>

  void main () {
    gl_Position = cc_matViewProj * cc_matWorld * vec4(a_position, 1);
    gl_Position.z -= 0.0001;
  }
}

CCPROGRAM line-fs {
  uniform Constant {
    vec4 color;
  };

  vec4 front() {
    return color;
  }
  vec4 back() {
    return vec4(color.rgb, color.a * 0.2);
  }
}
