CCEffect %{
  techniques:
  - passes:
    - vert: light-vs:vert
      frag: light-fs:frag
      rasterizerState:
        cullMode: none
      depthStencilState:
        depthTest: true
        depthWrite: true
      blendState:
        targets:
        - blend: false
      properties: &props
        color: { type: color4, value: [1, 1, 1, 1] }
        intensitySize: { type: vec4, value: [1, 1, 1, 1] }
}%

CCProgram light-vs %{
  precision mediump float;
  #include <cc-local>
  #include <cc-global>
  #include <common>
  #include <gamma>

  in vec3 a_position;
  out vec3 v_color;

  uniform Constant {
    vec4 color;
    vec4 intensitySize; // x: intensity, y: size
  };

  float Luminance(vec3 linearColor) {
    return dot(linearColor, vec3(0.3, 0.59, 0.11));
  }

  vec4 vert () {
    float f = max(color.r, max(color.g, color.b));
    v_color = color.rgb / f * intensitySize.x;
  #if CC_USE_HDR
    v_color *= FP_SCALE;
  #else
    v_color = LinearToSRGB(v_color * cc_exposure.x);
  #endif
    return cc_matViewProj * cc_matWorld * vec4(a_position * intensitySize.y, 1.0);
  }
}%

CCProgram light-fs %{
  precision mediump float;

  in vec3 v_color;

  vec4 frag () {
    return vec4(v_color, 1.0);
  }
}%
