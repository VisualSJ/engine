CCEffect %{
  techniques:
  - passes:
    - vert: light-vs:vert
      frag: light-fs:frag
      rasterizerState:
        cullMode: none
      depthStencilState:
        depthTest: true
        depthWrite: false
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendDstAlpha: one_minus_src_alpha
}%

CCProgram ubo %{
  uniform Constant {
    vec4 color;
    vec4 intensitySize; // x: intensity, y: glow
  };
}%

CCProgram light-vs %{
  precision highp float;
  #include <cc-local>
  #include <cc-global>
  #include <common>
  #include <gamma>
  #include <ubo>

  in vec3 a_position;
  in vec2 a_texCoord;
  out vec3 v_color;
  out vec2 v_uv;

  vec4 vert () {
    v_color = color.rgb * intensitySize.x * 100.0;
    #if CC_USE_HDR
      v_color *= FP_SCALE;
    #else
      v_color = LinearToSRGB(v_color * cc_exposure.x);
    #endif
    v_uv = a_texCoord;
    return cc_matViewProj * cc_matWorld * vec4(a_position, 1.0);
  }
}%

CCProgram light-fs %{
  precision highp float;
  #include <ubo>

  in vec3 v_color;
  in vec2 v_uv;

  float sphere(vec3 d, vec3 p) {
    return smoothstep(1.0 - intensitySize.y, 1.0, 1.0 / length(cross(d, p)));
  }

  vec4 frag () {
    vec2 uv = v_uv - 0.5;
    vec3 R = normalize(vec3(1.0, uv));
    if (any(greaterThan(abs(uv), vec2(0.48)))) return vec4(0.0, 0.0, 0.0, 1.0);
    return vec4(v_color, mix(sphere(R, vec3(5.0, 0.0, 0.0)), 1.0, dot(uv, uv) < 0.0625));
    // return vec4(v_color, sphere(R, vec3(4.5, 0.0, 0.0)));
  }
}%
