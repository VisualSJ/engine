CCEffect {
  techniques: [
    {
      passes: [
        {
          vert: sky-vs:vert
          frag: sky-fs:frag
          priority: min + 10
          rasterizerState: {
            cullMode: none
          }
          depthStencilState: {
            depthTest: true
            depthWrite: false
          }
          properties: {
            cubeMap: { type: 'samplerCube', value: 'default-cube' }
          }
        }
      ]
    }
  ]
}

CCProgram sky-vs {
  precision mediump float;
  in vec3 a_position;

  #include <cc-global>

  out vec3 viewDir;

  vec4 vert () {
    mat4 matViewRotOnly = mat4(mat3(cc_matView));
    vec4 clipPos = cc_matProj * matViewRotOnly * vec4(a_position, 1.0);
    viewDir = a_position;

    vec4 pos = clipPos;
    pos.z = clipPos.w * 0.99999;
    return pos;
  }
}

CCProgram sky-fs {
  precision mediump float;
  in vec3 viewDir;

  uniform samplerCube cubeMap;
  #include <unpack>
  #include <cc-global>
  #include <gamma>
  #include <post-process>

  vec4 frag () {
  #if USE_RGBE_CUBEMAP
      vec3 c = unpackRGBE(texture(cubeMap, viewDir));
      c = linearToSRGB(c / (1.0 + c));
      vec4 o = vec4(c, 1.0);
  #else
      vec4 o = texture(cubeMap, viewDir);
  #endif
    return PostProcess(o, cc_exposure.w);
  }
}
