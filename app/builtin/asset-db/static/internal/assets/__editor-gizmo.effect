CCEffect %{
  techniques:
  - passes:
    - vert: gizmo-vs:vert
      frag: gizmo-fs:frag
      priority: max - 10
      rasterizerState:
        cullMode: none
      depthStencilState:
        depthTest: false
        depthWrite: false
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendDstAlpha: one_minus_src_alpha
      properties: &props
<<<<<<< Updated upstream
       color: { type: color4, value: [1, 1, 1, 1] }
=======
        color: { type: color4, value: [1, 1, 1, 1] }
>>>>>>> Stashed changes

  - passes:
    - vert: line-vs:vert
      frag: line-fs:front
      priority: max - 10
      rasterizerState:
        cullMode: none
      depthStencilState:
        depthTest: false
        depthWrite: false
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendDstAlpha: one_minus_src_alpha
      properties: *props

  - passes:
    - vert: line-vs:vert
      frag: line-fs:front
      priority: max - 10
      rasterizerState:
        cullMode: none
      depthStencilState:
        depthTest: true
        depthWrite: false
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendDstAlpha: one_minus_src_alpha
      properties: *props
    - vert: line-vs:vert
      frag: line-fs:back
      priority: max - 10
      rasterizerState:
        cullMode: none
      depthStencilState:
        depthTest: true
        depthWrite: false
        depthFunc: greater
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one
          blendDstAlpha: one_minus_src_alpha
      properties: *props
}%

CCProgram gizmo-vs %{
  precision mediump float;
  #include <cc-local>
  #include <cc-global>

  in vec3 a_position;
  in vec3 a_normal;
  out vec3 normal_w;
  out vec3 pos_w;
  out vec3 pos_l;
  out vec3 right;
  out vec3 up;
  out vec3 forward;

  vec4 vert () {
    vec4 pos = vec4(a_position, 1);
    vec4 normal = vec4(a_normal, 0);

    pos_l = a_position;
    pos_w = (cc_matWorld * pos).xyz;
    normal_w = (cc_matWorldIT * normal).xyz;
    right = vec3(cc_matView[0][0], cc_matView[1][0], cc_matView[2][0]);
    up = vec3(cc_matView[0][1], cc_matView[1][1], cc_matView[2][1]);
    forward = vec3(cc_matView[0][2], cc_matView[1][2], cc_matView[2][2]);

    return cc_matViewProj * cc_matWorld * pos;
  }
}%

CCProgram gizmo-fs %{
  precision mediump float;
  #include <rect-area-light>
  #include <cc-global>
  #include <gamma>
  #include <post-process>

  in vec3 normal_w;
  in vec3 pos_w;
  in vec3 pos_l;
  in vec3 right;
  in vec3 up;
  in vec3 forward;

  uniform Constant {
    vec4 color;
  };

  vec4 frag () {
    vec3 N = normalize(normal_w);
    vec3 V = normalize(cc_cameraPos.xyz - pos_w);

    // vec3 L = normalize(cross(forward, vec3(0, 1, 0)));
    // vec3 diffuse = color.rgb * (0.2 + max(0.0, dot(N, L)) * 0.8);

    vec3 points [4];
    vec3 up = vec3(0, 1, 0);
    points[0] = (forward * 3.0 + right + up) * 40.0;
    points[1] = (forward * 3.0 - right + up) * 40.0;
    points[2] = (forward * 3.0 - right - up) * 40.0;
    points[3] = (forward * 3.0 + right - up) * 40.0;
    vec3 diffuse = color.rgb * (0.2 + LTC_Evaluate(N, V, pos_l, mat3(1), points) * 0.8);
    return PostProcess(vec4(diffuse, color.a), cc_exposure.w);
  }
}%

CCProgram line-vs %{
  precision mediump float;
  #include <cc-local>
  #include <cc-global>

  in highp vec3 a_position;

  vec4 vert () {
    vec4 pos = cc_matViewProj * cc_matWorld * vec4(a_position, 1);
    pos.z -= 0.0001;
    return pos;
  }
}%

CCProgram line-fs %{
  precision mediump float;
  #include <cc-global>
  #include <gamma>
  #include <post-process>

  uniform Constant {
    vec4 color;
  };

  vec4 front() {
    return PostProcess(color, cc_exposure.w);
  }
  vec4 back() {
    return PostProcess(vec4(color.rgb, color.a * 0.2), cc_exposure.w);
  }
}%
